Angular Training 
----------------

What is Angular?
----------------
Angular is UI Development Framework or Platform for developing simple and complex application 
It is a client-side techology 
It is build using Typescript 
It is used to build SPA(Single Page Application)
It is Component-Based Framework
It provides a collection of well-intergrated libraries that cover a wide varieties of features including routing, form management , client-server communication and more....

Traditional Web Application
---------------------------
E-Commerce - Asp.Net Web Form 

	Index.aspx :- http://mysite/index.aspx
	About.aspx
	ProductCatalog.aspx
	Contact.aspx.......


Version of Angular 
------------------
Angular JS - 1.x (Javascript)

Angular 2 - Typescript
Angular 4
Angular 5,.......
Angular 14

Core Building Block of Angular 
------------------------------
Modules
Component 
	-Class(Typescript Class)
		properties
		method 
	-Template (HTML Code)
	-Meta Data(Extra data for the component)
Services 
Directives 
Pipes
Routing

Software Requirement 
--------------------
NodeJS and NPM
Visual Studio Code 

Installing Angular CLI 
----------------------
node --version 

npm -version	

npm install -g @angular/cli

ng --help or help :- to see all the possible options 

ng version :- to view the version of angular cli installed 

creating a new angular project 

Navigate to directory where you want yo keep all the projects 

ng new <<name-of-the-project>>

ng new demo-angularapp

cd demo-angularapp

to run the application 

	ng serve or npm start 
	
	ng serve - to start the local development server and host the angular application 
	
	ng serve -o - to start the application on the local server and launch the application in the default browser
	
	ng serve --port 5500
	
Components
----------
Component are the building block of angular application 

Each Component has the following artifacts by default:

-The Component Class (Typescript Class)

	<<component-name>>.component.ts
	
	Root Component is knows as app.component.ts
	
	Product List Component - productlist.component.ts
	
	Register Component - register.component.ts
	
-The Component's Template (View)

	<<component-name>>.component.html 
	
	Root Component :- app.component.html 
	
	ProductList Component - productlist.component.html 
	
-The Component's Stylesheet 
	
	<<component-name>>.component.css
	
	Root Component :- app.component.css
	
-The Component's Unit testing code 
	
	<<component-name>>.component.spec.ts
	
	Root Component :- app.component.spec.ts
	
The Module Class 
----------------
Every Module is a Typescript class 
The class is decorated with @NgModule decorator 
Root Module is app.module.ts

Bootstrapping 
-------------
Bootstrapping is a technique of initializing or loading an Angular Application 

The Angular takes the following steps to load the application 

1.Loads Index.html 
2.Angular, Third-party libraries and Application Loads 
3.Main.ts the application entry point 
4.Root Module Executes 
5.Root Component Execute 
6.Template get rendered 

runtime.js - WebPack runtime 

WebPack :- It is a bundler. It scans the application looking for javascript files and merges them into one to more big files. It has the ability bundles any kind of files like Javascript, Css etc

polyfill.js :- It has script for supporting variety of latest modern browsers

styles.js :- This file contains the global style rule bundled as javascript file

vendor.js :- Contains the scripts from the Angular core library and other third party libraries 

main.js :- code to application 

Creating Components 
-------------------
Manual Approach :- You create all the class and other related files for the component manually 

Angular CLI :- You can create component and related files using the Angular CLI 

	ng generate --help :- shows the help for the command 
	
	ng generate component <<component-name>>
	
	ng g c <<component-name>>

	ng generate component login : create a login component with all the files in a folder
	
	ng g c about : creates a about component without test logic in the app root folder
	
	ng g c register --skip-tests --inline-template --inline-style

Component
---------	
	
Component Class - Typescript Class 

Decorator :- A decorater is used in angular to make a typescript behave as different angular features.

	@Component Decorator 
		selector :- A tag name given to a component which can be used in the html code 
		
		Template URL :- path to the html code 
			or 
		Template :- inline html code 
		
		Style URL :- path to css file 
			or 
		Styles :- Css Code 
		
Angular Data Binding 
--------------------
Data Binding is a technique , where data stays in-sync between the component (TS class) and the view (HTML)
Whenever the user updates the data in the view, Angular updates the component or Vice Versa 

One-Way Binding 
---------------
In this approach the data flow in one direction , Component to View 
To Implement One-Way data binding we use interpolation 

Interpolation allows us to include an expression as part of a string literal enclose in double curly brackets {{ stringliteral }}

The angular evaluates the expression in the string literal and replace the string literal with the actual value that you wante to display in the view 

export class AppComponent{

	title="Angular Application"
	message ="Welcome to Angular"
}

interpolation --> {{ expression }}

	<h2>{{ title }}</h2>
	<p>{{ message }}</p>
	
Install Bootstrap 
-----------------
npm install --save bootstrap 

Two-Way Binding
---------------
Two-Way data binding means that changes made to our model in the component are propogated to the view and any changes made in the view are immediately updated in the model 
Two-Way data binding is useful in forms
Angular used ngModel directive to achieve Two-Way data binding 

name = "Malcolm"

Employee Name : <input type="text" [(ngModel)]="name">

ngModel is a part of FormsModule and to use it we have register the FormsModule inside the root module of our angular application

Event Binding 
-------------
Event Binding allows us to bind events such as click, keystroke, hover etc 

Javascript :- <button onclick="functionname()">Click Me</button>

Angular :- <button (click)="functionname()">Click Me</button>

We can pass $event object to an event handler to get additional information about the event

<button (click)="methodname($event)">Click Me</button>

$event object contains all the information about the event 

It it's a DOM element,$event contains the information about DOM element 
It it's a Component, $event contains the information about the Component

.target property :- helps to get the information about the target 

Can we use same event handler with multiple elements ? Yes

Events can be raised by Components
	-EventEmitter<T>
	
Template Reference Variables
----------------------------
Template Reference variables helps you use data from one part of the template in another part of the same template.
Use Template reference variables to perform tasks such as respond to input or finely tune your application forms 

A Template reference variable can refer to the following 
	-A DOM Element with in a template 
	-A Directive or Component 
	-A TemplateRef from ng-template 
	-A Web Component 
	
<element #variablename></element>

<input type="text" #city>

Component Communication 
-----------------------

	Parent--->Child 
		Parent Component Passes data to child component 
		@Input Decorator
		Root->BookList-->Book
		
		a.In the child compoent , create a data member and decorate it with the @input decorator 
			@input---> @angular/core
		b.From the parent component, when rendering the child component pass data to the markup of the child component by using the property binding syntax
		
			<element [property]="value">
		3.The child component can use the member marked with the @Input decorator to access the data passed by Parent Component
		
	Child---->Parent 
		Child Component passes data back to parent component 
		@Output Decorator 
		EventEmitter<T> Class (Notification)
		
		1.In the child component , create an instance of the EventEmitter<T> class and specify the type of data to be passed to the parent 
		
		2.Decorate the datamember with the @Output decorator 
			@Output allows parent component to receive notification and respond to it 
		
		3.Emit the custom event from the child component using the emit method of EventEmitter<T> class
		
		4.In the parent component template, use event binding syntax so that the parent can attach an event handler to the custom notification fired by the child component 
		
Directives
----------
Directives are classes that add additional behaviour to elements in your Angular application
It helps us to manipulates DOM
You can change the apperance , behaviour or layout of the DOM elements using the directives 
They help you to your HTML

Built-In Directive 
------------------
Component Directive 
	They are directive with a template view for a component 
	
Structural Directive 
	These Directives can change the DOM layout by adding or removing DOM elements 
	
	ngIf - *ngIf
	
		<element *ngIf="condition">....</element>
		
	ngSwitch
		*ngSwitchCase - to specify cases
		*ngSwitchDefault - to specify the default case
		
		<div [ngSwitch]="num">
			<div *ngSwitchCase="1">One</div>
			<div *ngSwitchCase="2">Two</div>
			.
			.
			.
			.
			<div *ngSwitchDefault>Default Message</div>
		</div>
	
	ngFor
		<element *ngFor="let variable of collection/array">
			{{ variable }}
		</element>
		
		"variable" is know as "template input variable"
			scope is only within <element>
			
		*ngFor Variables 
		
		index: contains the zero based index of item being iterated
		
		<element *ngFor="let b of books;let i=index"></element>
		
		odd : returns true if the item is an odd item 
		
		even: returns true if the item is an even item 
		
		trackBy:function 
			Tells Angular how each item in the collection must be tracked. Without trackBy, Angular re-renders the entire DOM tree even if the data is not change
		
		a.Create a function which returns a unique value from the model, which angular will use to track each item 
			eg:- eid,pid,bookid etc
			
		b.Use the trackBy Property with *ngFor and specify the name of the tracking function created
		
		if the data changes , the existing DOM element will be not re-rendered and only the new DOM elements would be added to the DOM tree

Attribute Directive 

	ngModel
	ngStyle 
	ngClass
	
Creating Custom Directive 
-------------------------
a.Creating a custom attribute directive 
b.Creating a custom structural directive 

	First decide, what tha custom directive is supposed to do?
	
	Example :-
		AlertDirective (directive class)
			<element [alert]></element>
			
		When applied to an HTML Element, it must display an alert message
		
		<p [alert]>Hello</p>
		<span [alert]>Welcome</p>

	Inside the custom directive , we can respond to the event of the HOST Element
	
a.Creating a Custom attribute directive 

	1.Create a TS class and decorate it with @Directive() decorator 
	2.Declare the directive in the declaration section of the AppModule
	3.Use the directive in the component's template
	
	Angular CLI --> ng generate directive <<directivename>
						or 
					ng g d <<directivename>> --skip-tests
					
	Inside the custom directive , we can respond to the event of the HOST Element
	
	a.Inside the directive , create a handler function 
	b.Decorate it with @HostListener() decorate and specify the DOM event 
	
	A custom directive can be applied to a DOM element as well as to custom component
	
	Accessing the HOST element from within the directive 
		To change the behaviour of the HOST element
		Inject the ElementRef service into the directive class 
		
	<p appAlert>...</p>
	
	Just like components, directive can also have input properties(marked with @Input())
	
	<p appAlert inputmessage="Welcome"></p>
	
	<p appAlert inputmessage="Hello"></p>
	
	"inputmessage" is an input property
	
	<p appAlert [inputmessage]="'This is some message'"></p>
	
	If we need to pass a literal to input property using the property binding syntax use single quotes within double quotes
	
	<span appAlert="Hi">.....</span>
		or
	<span [appAlert]="Hi">....</span>
	
	we can create getter and setter in the directive class to make the above code work

Creating a Custom Structural directive 
--------------------------------------
Objective :- Create a custom structural directive which repeats/clone an element for the specified number of times(similar to ngFor)

Usage :-
	<element *appRepeat="10"></element>
	
	<p *appRepeat="10">Hello</p>
	
	1.Create a directive 
		
		ng g d repeat --skip-tests
	
	2.Two thing needed for creating a structural directive 
		a.ViewContainerRef
		b.TemplateRef
		
	ViewContainerRef corresponds to a location in the DOM where the embedded view is created 
	TemplateRef represents an embedded template 
	
	3.Inject the above service/classes in the constructor of the directive as private variables
	
	4.Create a setter and getter with the name appRepeat and decorate the setter with @Input decorator
	
	5.The logic to clone the elements will be inside the setter 
	
Pipes 
-----
Fromerly known as "filters" in AngularJS (1.x)
A pipe allows you to pass some input and return the transformed value back

input -----> PIPE(transform)------> TransformedData(OP)

Many Built-In Pipes are available 
	1.decimal
	2.currency 
	3.date 
	4.json
	5.uppercase
	6.lowercase 
	7.titlecase 
	8.async (used with observables)
	.
	........
	
	Syntax :- Pipes are always used in templates
	
	{{ expression/input to the pipe | pipename }}
	
	{{ dob  | date }}
	{{ price | currency }}
	
	Chaining of Pipes
	
	{{ expression/input | pipe1 | pipe2 |pipe3.... }}
	
Custom Pipe 
-----------
Create a custom pipe to get square of a number 

	{{ 2 | square }}
	
1.Creat a class decorated with @Pipe() decorator, optionally implement the PipeTransform Interface

2.Write the transformation logic inside the transform() method 

3.Angular calls the transform() when the pipe is used

	ng generate pipe <<pipename>>
			or 
	ng g p <<pipename>>
	
First argument to the transform() is the value of the left side of the pipe.
Additional arguments can be passed as parameter to the transform() -- optional 

Service 
-------
A Service is a TS class which contains logic that can be used by multiple component 

	Example 
		Authentication Logic
		Authorization Logic
		Logging Logic 
		Data Access Logic 
		
A Service is a Singleton instance - Angular creates one instance of the service per application and the same instance is shared by all the component 

A Service can be injected into components, directives, pipe using Angular's built-in dependency injection mechanism 

Dependency Injection (DI) is a technique in which a class receives its dependencies from external source rather than creating them itself

class Engine
{
	constructor (parameters){}
}

class Tires
{
	constructor (parameters) {}
}

Without DI 
----------
class Car{
	engine;
	tires;
	
	constructor()
	{
		this.engine = new Engine(arguments..)
		thie.tires =  new Tires(arguments...)
	}
}

With DI 
-------
class Car{
	engine;
	tires;
	
	constructor(engine,tires)
	{
		this.engine= engine;
		this.tires = tires;
	}
}

var myengine = new Engine(parameter)
var mytire = new Tire(parameter)

var mycar = new Car(myengine,mytire)

HR Management System 
--------------------
Employee (Id,FirstName,LastName,Department...)

	2 Components 
		employee-list (contains id and first-name of the employee)
		employee-details (display the detailed information of all the employee)
		
	ng generate service <<service-name>>
			or 
	ng g s <<service-name>>
	
	A service class is decorated with @Injectable() decorator 
	
	@Injectable() makes the service class injectable using the Angular's built-in DI
	
	The class automatically participates in Angular's DI mechanism 
	
In a real-time application, the data will come from an API or a web service 

In Angular to interact with an api we make use of HTTPModule

HTTPModule 

	HttpClient - @angular/common/http
	
	-The ability to request typed response object 
	-Error Handling 
	-Testing 
	-Request and Response interception 
	
	GET 
	POST 
	PUT 
	PATCH 
	DELETE 
	
What is an Observable?
----------------------
Observable is an asynchronous pattern

In Observable pattern we have an Observable(Publisher) and a Observer.

Observer observe the Observable
In many implementation Observer is also called a Subscriber

An Observable can have many subscribers 

Observable emits items or notification over time to which a  subscriber can subscribe
When a subscriber subscribes to an Observable, the subscriber also specifies a callback function to perform some action

Routing 
-------
Routing is a technique to navigate between view in a SPA (Single Page Application)

In Angular, the RouteModule (@angular/router) has the API related to routing 

Angular interprets changes to the browser URL and performs the navigation based on the routes configured

	URL:- 
	
	Every Angular application has a base URL 
	
	http://servername/appname:port/index.html 
	
	http://localhost:4200/index.html - BASE URL for our Angular Application 
	
	During routing , the base URL does not change
	Routing starts from the end of the base URL 
	
	Route could be:- 
	
	http://localhost:4200/index.html/home --> HomeComponent 
	http://localhost:4200/index.html/aboutus --> AboutUSComponent
	
	In the index.html, the "base href" element tells Angular how the URLs should be generated 
		Default is "/"
		
		http://localhost:4200/index.html/home 
		
		We can change the value of the base href 
			<base href="ct"/>
			
		http://localhost:4200/ct/home
		http://localhost:4200/ct/aboutus.
		.
		.
		.....
		
Steps 
-----
a.Define routes for the application
	Routes can be defined in "app-routing.module.ts"
	
b.Create an array which contains one or more "route" objects 
	Each route object contains the following properties 
		
		1.path -> The URL Pattern 
		2.component -> The Component to be shown when the pattern specified 
		3.childern 
		4.redirectTo
		
c.Use RouteModule.forRoot() method passing the route array to inject all the routing service and obtain a RouterModule -- App Level 

d.Import the RouteModule created in the above step into the app module

Angular Forms 
-------------

Forms 
-----
Vital for business application 
It helps to create an experience that guides user efficiently and effectively trough the workflow 

Template Driven Forms
---------------------
HTML Template 
Easy to use 
Support two-way data binding with ngModel 
Bulky HTML and Minial Component Code 
Unit testing is a challenge
Suitable for simple scenarios

Contact Manager 
---------------
First Name 
Last Name 
Contact No 
Email 

FormModule - ngForm 

Reactive Forms 
--------------
Define controls inside the component class 
Complex scenarios 
Dynamic Control Creation 
Dynamic and Custom validations 
Unit testing is not a challenge 
Does not supports 2-way data binding 
